OOP => object oriented Programming(객체 지향 프로그래밍)
OOP는 객체 지향 프로그램으로 객체를 이용하여 프로그래밍을 동작하는 방식이다.
=> RealWorld를 System.화 하는 방법론(현실세계를 개체라는 것으로 프로그램상으로 반영하는 방식)

object(객체)
객체는 대상을 나타내는 것으로 식별가능한 것을 말한다. 예를 들어 자동차 안에는 많은 부품이 존재한다. 핸들, 바퀴, 엔진등 자동차를 이루는 것을 객체라고 한다.  이렇게 구체적으로 속성을 가지고 있으면서 식별 가능한 것을 객체라고 한다. 
=> System상에 표시되는 모든 것을 객체라고 한다.

Class(클래스)
클래스는 속성들의 집합이다. 자동차라는 클래스는 자동차를 구성하는 부품으로는 바퀴, 핸들, 엔진등과 같은 속성이 존재하고 사람이라는 클래스는 눈, 코, 입 과 같은 속성들이 존재한다. 이와 같이 유사한 특징을 지닌 객체들의 속성을 묶어 놓은 집합체가 클래스이다.
=>공통적이고 일반적인 것을 추출해서 만든 것이 클래스 / 추상화 작업을 통해 표현한 것

abstraction(추상화)
객체의 관련 속성만 표시하고 불필요한 세부 정보는 숨기는 것으로,  객체들의 공통된 특징을 파악하여 정의해 놓은 기법이며,  프로그래밍 노력과 복잡성을 줄여주며 필요에 따라 기능을 표시할 수 있다.
=>System에 필요한 정보를 추출하는 것

Generalization(일반화) / Inheritance(상속)
Inheritance(상속)은 상위 클래스(부모 클래스)와 하위 클래스(자식 클래스)로 구분되어 하위 클래스는 상위클래스의 속성을 이어(상속)받아 그대로 사용할 수 있는 구조이다. 하지만 모든 상속되어있는 클래스들이 속성을 이어받지 않는다. 상위클래스에 private가 선언되어 있으면 상속관계에 있어도 속성을 이어 받지 못한다. 클래스의 속성을 자식클래스에게 상속한다면 자식 크래스 선언시 extends 키워드를 넣고 CSV(띄고) 부모클래스를 선언하면 부모클래스의 속성을 자식 클래스에게 상속할 수 있다.

Generaliztion(일반화)
일반화는 공통점이 있는 클래스들을 합하여 부모클래스를 만드는 방식을 말한다. 예를 들어 경찰차, 구급차, 소방차, 등이 가지고 있는 공통점은 자동차이며 자동차는 이들의 부모클래스가 되는 것이다. 하나의 예를 더하여 햄버거, 치킨, 밥 등이 가지고 있는 공통점은 음식으로 이들의 부모클래스가 되는 것이다. 이처럼 여러 공통된 특징을 가지고 있는 것들을 모아 하나의 클래스인 부모 클래스를 만드는 것이 일반화이다.

Specialization(구체화)
구체화는 자식 클래스가 상속을 받으면서 부모클래스의 기능이 추가되면서 다른 자식클래스를 추가하여 수행하는 서브클래스를 만드는 과정을 말한다.

#인터페이스 : 동일한 목적 하에 동일한 기능을 보장하게 하기 위함 / 자바의 다형성을 이용하여 개발코드 수정을 줄이고 유지보수성을 높인다.
Realization(실체화)
자바에서 실체화는 동일한 목적하에 동일한 기능을 보장하게 하는 인터페이스를 상속받아 자식클래스에서 재정의해서 사용하는 것을 뜻한다. 예를 들어 도형 인터페이스는 삼각형, 원, 사각형, 육각형들의 많은 자식 도형 클래스를 정의하여 상속할 수 있다.

Association(연관관계)
연관관계는 서로 다른 클래스들이 같은 속성으로 연관되어 있는 구조를 말하며 단방향 연관관계와 양방향 연관관계가 있다. 단방향 연관관계는 a 클래스에서 b 클래스 또는 b클래스에서 a클래스로 단방향으로만 진행 되어지는 관계이며 양방향 연관관계는 a와 b 둘 다로 진행되어지는 관계를 말한다.

dependency(의존관계)
의존관계는 어떠한 객체가 다른 객체를 호출할 때 이루어지는 것으로 실생활의 예로는 TV와 리모컨의 관계로 나타난다.

Polymorphism(다형성)
각 요소들이 여러 가지 자료형으로 표현될 수 있다는 것을 말한다. 기본자료형(byte, short, int, long, double, float, char, boolean) 참조 자료형(String, Integer...) 

Encapuslation(캡슐화) / 절차은익 / 정보은익
캡슐화는 외부의 접근을 막는 것으로 외부에 노출할 필요가 없는 정보들을 은닉하는 것이다. 즉 캡슐화의 목적은 코드를 재수정 없이 재활용하는 것과 (public, private, protected)접근제어자를 통한 정보 은익이다.