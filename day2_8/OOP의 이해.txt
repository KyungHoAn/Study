OOP => object oriented Programming(객체 지향 프로그래밍)
객체 지향 프로그래밍은 컴퓨터 프로그래밍 패러다임 중 하나로, 프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고 그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다. 객체지향의 기본원리에는 추상화(Abstraction), 캡슐화(Encapsulation), 모듈화(Modularity), 계층화(Hierachy)의 원리가 존재한다. 객체지향프로그래밍의 장점은 코드 재사용 용이(남이 만든 클래스를 가져와서 이용할 수 있고 상속을 통해 확장해서 사용가능) / 유지보수가 쉬움(수정해야 할 부분이 클래스 내부에 멤버 변수 혹은 메서드로 존재하기 때문에 해당 부분만 수정하면 됨) 단점은 처리속도가 느리고 / 객체가 많으면 용량이 커진다.
object(객체)
물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신과 다른 것을 식별가능한 것을 말한다. 객체는 구분가능한 식별성, 객체가 가지고 있는 조건인 상태와 객체가 반응할 수 있는 메시지의 집합으로 이루어지는 행위로 구분된다. 
Class(클래스)
어떤 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는 속성과 행위를 변수와 메서드로 정의한 것으로, 객체를 정의하는 틀 또는 설계도의 의미를 갖는 객체의 모임이다. 자바안에서 클래스는 객체의 상태를 나타내는 필드와 객체의 행동을 나타내는 메소드로 구성된다. 여기서 필드는 클래스에 포함된 변수를 의미하고 메소드는 특정 작업을 수행하기 위한 명령문의 집합이다. 
abstraction(추상화)
객체를 구분되는 핵심적인 특징으로 분휴하며 객체의 관련 속성만 표시하고 불필요한 세부 정보는 숨기는 구조이며, 추상화는 프로그래밍 노력과 복잡성을 줄여주며 필요에 따라 기능을 표시할 수 있다.
Generalization(일반화) / Inheritance(상속)
상속은 상위클래스(부모 클래스)와 하위 클래스(자식 클래스)로 구분되는 클래스로 자식 클래스는 부모 클래스를 선택해서, 그 부모클래스의 멤버를 상속받아 그대로 사용할 수 있는 구조이다. 하지만 상속을 하더라고 자식 클래스가 부모의 모든 것들을 물려받을 수 있는 것은 아니다. 예로 부모 클래스의private접근 제한을 갖는 필드 및 메소드는 자식이 물려 받을 수 없으며, 부모와 자식 클래스가 서로 다른 패키지에 있다면, 부모의 defalut 접근 제한을 갖는 필드 및 메소드도 자식이 물려받을 수 없습니다. 클래스를 상속하고자 할 겨우에는 상속받고자 하는 자식의 클래스명 옆에 extends 키워드를 붙히고, 상속할 부모 클래스명을 적습니다. 자바에서는 다중 상속을 허용하지 않으므로, extends 뒤에는 하나의 하나의 부모 클래스만 와야 한다.
상속은 Specializaion(구체적,전문화)와 Generalization(일반화)로 두가지로 구분된다.
Generaliztion(일반화)
=> 여러 클래스들의 공통점들을 모아서 부모클래스를 만드는 것이다. 코딩 순서는 경찰차 / 구급차 등 => 자동차 순서로 코딩이 이루어 진다. 
여러 개체들이 가진 공통된 특성을 부각시켜 하나의 개념이나 법칙으로 성립시키는 과정으로, 자식 클래스를 외부로부터 은닉하는 캡슐화의 일종이다. 
Specialization(구체화)
=> 상속 받으면서 부모의 기능에다가 기능이 추가시키면서 세분화 시키는 특징이다. parent -> child -> child 순으로 코딩을 진행한다. 수퍼 클래스를 상속 받아 서브 클래스를 만드는 것이다. 구체화은 가장 많이 사용하는 상속 방법으로 수퍼 클래스에 새 특징을 추가하거나 새 기능을 추가하여 더 특별한 일을 수행하는 서브클래스를 만든다.
Realization(실체화)
자바에서의 실체화 관계는 인터페이스를 상속받아 자식클래스에서 재정의하여 사용한다. 부모클래스의 은닉화 선언된 필드 또는 메소드는 상속되지만 접근은 불가능. 부모 인스턴스 생성 후 자식 인스턴스 생성
인터페이스의 명세,정의만 있는 메서드를 오버라이딩 하여 실제 기능으로 구현하는 것을 말한다. 자바에서 인터페이스 상속의 의미를 가진다. 예) 도형 인터페이스 => 원 클래스 / 삼각형 클래스
Association(연관관계)
단방향 연관관계와 양방향 연관관계가 있다. 멤버가 주문을 참조하기만 하면 단방향이며, 주문도 멤버를 참조한다면 양방향 관계이다. 연관관계는 또한 다중성을 가지며 객체가 양방향 연관일 때 연관관계의 주인을 정해야한다. 
dependency(의존관계)
클래스 안에 메소드의 매개변수 또는 리턴타입으로 사요오디는 객체인 경우 클래스를 변경할 경우 의존관계의 클래스의 내용도 변경되어야 되는 관계를 의미한다. 예)TV <=리모컨
Polymorphism(다형성)
각 요소들이 여러 가지 자료형으로 표현될 수 있다는 것을 말한다. 
Encapuslation(캡슐화) / 절차은익 / 정보은익
캡슐화는 데이터(변수)와 그 데이터를 처리하는 코드들을 하나의 단위로 묶는 작동 원리이다. 캡슐화의 목적은 코드를 재수정 없이 재활용하는 것과 접근 제어자를 통한 정보 은닉이다. 캡슐화된 클래스의 변수들을 접근제어자로 인해 클래스의 외부에서는 접근할 수 없지만 해당 클래스 내부의 메서드를 통해 변수를 조작할 수 있습니다. 여기서 캡슐화된 클래스 내부의 메서드만을 통해 변수를 조작 가능한 것이 정보 은닉이라고 한다. 
캡슐화의 이점은 클래스의 필드 값에 대한 수정 권한을 설정할 수 있으며, 필드에 저장된 모든 값들을 컨트롤 할 수 있고, 사용자는 데이터가 클래스에 어떻게 저장되는지 확인할 수 없습니다. 마지막으로 클래스의 결합도가 낮아져 재사용이 용이한 저이 이점이다.